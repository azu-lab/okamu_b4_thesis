from Al_CCs import Al_CCs
from DAGs.DAG_base import Node
from DAG import DAG
import random
from JSONexporter import JSONexport
from Al_CCs import Method
from sys import argv

tgff_file_name = "./DAG/original_20_6.tgff"
if len(argv) > 1:
    tgff_file_name = argv[1]

dag = DAG()
dag.read_file_tgff(tgff_file_name)
dag.record_pre_suc()
dag.record_src_snk()

#print([random.randint(1,8) for i in range(300)])
#print([random.randint(3,9)/10 for i in range(300)])
# 1-8
#n = [5, 4, 6, 2, 5, 4, 6, 6, 5, 4, 7, 3, 7, 5, 3, 2, 1, 4, 8, 5, 6, 8, 5, 4, 5, 5, 4, 6, 7, 6, 5, 5, 5, 4, 6, 3, 1, 4, 6, 1, 1, 7, 5, 3, 8, 8, 4, 7, 8, 6, 2, 1, 3, 1, 6, 4, 8, 7, 8, 4, 6, 8, 4, 4, 2, 6, 4, 6, 7, 6, 5, 3, 2, 4, 8, 7, 3, 7, 1, 5, 4, 2, 3, 5, 7, 5, 4, 2, 4, 3, 5, 7, 3, 6, 7, 2, 3, 1, 3, 5, 5, 3, 2, 5, 2, 8, 4, 6, 3, 8, 5, 6, 4, 7, 6, 5, 8, 7, 2, 2, 1, 7, 6, 5, 2, 1, 6, 5, 7, 8, 5, 8, 1, 4, 5, 6, 8, 2, 1, 5, 4, 8, 8, 6, 2, 4, 8, 4, 6, 7, 6, 2, 7, 6, 1, 8, 5, 1, 8, 7, 6, 8, 3, 7, 1, 4, 7, 8, 5, 7, 1, 6, 3, 2, 5, 4, 4, 7, 4, 4, 1, 7, 8, 1, 3, 2, 5, 6, 5, 7, 8, 4, 6, 7, 5, 1, 6, 5, 8, 2, 3, 1, 7, 8, 5, 1, 7, 6, 1, 6, 7, 3, 5, 5, 1, 5, 4, 4, 7, 7, 8, 8, 2, 8, 2, 5, 4, 8, 5, 4, 4, 4, 5, 6, 3, 1, 7, 8, 6, 2, 8, 7, 7, 5, 8, 8, 4, 4, 7, 4, 3, 8, 2, 5, 2, 5, 4, 5, 4, 1, 8, 2, 5, 4, 4, 7, 7, 1, 7, 8, 3, 8, 7, 4, 5, 8, 1, 1, 6, 6, 5, 5, 2, 5, 7, 4, 3, 5, 1, 4, 2, 1, 3, 4, 7, 6, 4, 2, 1, 3]
# 1-16
#n = [9, 8, 11, 14, 15, 3, 16, 12, 14, 14, 16, 7, 12, 7, 7, 5, 9, 10, 13, 15, 6, 8, 9, 2, 12, 10, 16, 16, 4, 8, 2, 12, 2, 7, 8, 1, 1, 10, 11, 16, 8, 3, 2, 1, 1, 14, 6, 1, 4, 9, 9, 7, 10, 4, 8, 8, 11, 16, 6, 16, 7, 6, 6, 7, 8, 2, 2, 13, 2, 3, 4, 4, 16, 15, 7, 15, 1, 3, 7, 3, 9, 6, 10, 15, 11, 8, 14, 12, 7, 8, 13, 4, 12, 3, 15, 6, 16, 14, 12, 12, 8, 1, 16, 6, 6, 12, 1, 5, 6, 1, 9, 8, 9, 5, 11, 13, 12, 4, 13, 9, 9, 14, 13, 14, 7, 11, 1, 16, 16, 5, 8, 8, 2, 15, 3, 10, 16, 16, 12, 2, 2, 10, 7, 9, 5, 14, 1, 3, 3, 7, 7, 1, 7, 4, 9, 2, 9, 11, 3, 11, 10, 9, 2, 2, 6, 16, 5, 2, 11, 16, 5, 2, 9, 1, 9, 2, 3, 10, 6, 5, 6, 9, 16, 14, 15, 3, 14, 4, 4, 11, 6, 8, 14, 16, 2, 2, 13, 15, 15, 11, 1, 15, 11, 1, 3, 3, 9, 16, 7, 9, 14, 1, 1, 7, 7, 16, 15, 8, 14, 12, 5, 2, 5, 3, 3, 7, 3, 9, 8, 8, 16, 4, 2, 14, 8, 12, 7, 14, 6, 16, 14, 10, 9, 16, 11, 7, 7, 12, 9, 7, 7, 7, 9, 15, 13, 3, 3, 14, 7, 4, 14, 15, 12, 1, 2, 10, 11, 8, 11, 7, 10, 16, 15, 14, 10, 9, 14, 16, 1, 16, 6, 11, 4, 4, 11, 8, 4, 9, 15, 15, 3, 11, 13, 11, 3, 3, 9, 11, 3, 4]
# 9-16
n = [10, 14, 12, 13, 11, 16, 14, 12, 12, 14, 13, 15, 14, 16, 15, 14, 13, 12, 9, 12, 10, 15, 16, 12, 16, 10, 9, 14, 9, 13, 10, 14, 16, 15, 15, 10, 16, 10, 16, 16, 14, 14, 16, 13, 15, 16, 14, 10, 14, 11, 14, 10, 14, 16, 12, 12, 10, 14, 14, 9, 12, 14, 13, 15, 15, 13, 14, 14, 14, 10, 16, 16, 13, 9, 11, 9, 9, 11, 16, 15, 12, 15, 10, 15, 12, 10, 9, 10, 10, 13, 11, 15, 13, 14, 15, 13, 14, 10, 14, 16, 15, 11, 12, 16, 10, 9, 14, 10, 9, 13, 9, 10, 11, 12, 14, 16, 12, 10, 12, 11, 12, 9, 16, 14, 14, 10, 10, 12, 13, 11, 11, 15, 11, 9, 10, 14, 15, 14, 14, 11, 13, 16, 16, 10, 10, 10, 13, 9, 12, 10, 12, 11, 11, 9, 12, 12, 11, 10, 9, 16, 13, 10, 9, 9, 14, 10, 11, 16, 13, 13, 16, 9, 16, 11, 9, 16, 10, 10, 12, 13, 12, 13, 9, 14, 15, 10, 10, 16, 10, 11, 14, 12, 15, 16, 14, 9, 15, 13, 15, 9, 13, 14, 10, 16, 13, 13, 12, 15, 15, 15, 16, 14, 10, 9, 14, 13, 13, 13, 12, 12, 14, 9, 10, 16, 12, 15, 16, 14, 10, 14, 11, 14, 15, 11, 14, 15, 12, 15, 14, 9, 10, 14, 16, 15, 9, 10, 11, 11, 9, 16, 9, 14, 15, 10, 9, 11, 16, 11, 11, 15, 16, 13, 15, 14, 16, 9, 10, 15, 11, 14, 16, 12, 16, 14, 9, 14, 9, 16, 9, 13, 15, 10, 13, 16, 10, 12, 15, 15, 14, 13, 12, 15, 15, 15, 13, 12, 14, 15, 15, 16] 
k = [0.4, 0.7, 0.8, 0.9, 0.6, 0.4, 0.7, 0.9, 0.3, 0.4, 0.9, 0.7, 0.7, 0.9, 0.8, 0.6, 0.8, 0.5, 0.3, 0.3, 0.9, 0.4, 0.4, 0.9, 0.4, 0.4, 0.9, 0.8, 0.8, 0.3, 0.4, 0.9, 0.4, 0.4, 0.9, 0.8, 0.6, 0.8, 0.6, 0.4, 0.8, 0.3, 0.4, 0.6, 0.5, 0.4, 0.5, 0.9, 0.7, 0.7, 0.9, 0.8, 0.3, 0.4, 0.6, 0.5, 0.6, 0.3, 0.6, 0.9, 0.8, 0.5, 0.3, 0.8, 0.9, 0.8, 0.6, 0.6, 0.5, 0.6, 0.8, 0.5, 0.3, 0.8, 0.8, 0.5, 0.7, 0.6, 0.7, 0.9, 0.3, 0.8, 0.8, 0.3, 0.8, 0.5, 0.5, 0.9, 0.3, 0.5, 0.8, 0.8, 0.6, 0.7, 0.8, 0.6, 0.5, 0.6, 0.8, 0.6, 0.5, 0.6, 0.4, 0.5, 0.6, 0.3, 0.7, 0.7, 0.6, 0.3, 0.3, 0.5, 0.5, 0.3, 0.4, 0.8, 0.5, 0.4, 0.4, 0.8, 0.7, 0.5, 0.9, 0.7, 0.3, 0.7, 0.8, 0.9, 0.5, 0.3, 0.5, 0.5, 0.9, 0.3, 0.9, 0.6, 0.8, 0.8, 0.6, 0.6, 0.6, 0.3, 0.9, 0.3, 0.8, 0.9, 0.4, 0.8, 0.9, 0.8, 0.9, 0.6, 0.5, 0.9, 0.7, 0.3, 0.6, 0.4, 0.8, 0.4, 0.9, 0.6, 0.4, 0.4, 0.9, 0.7, 0.9, 0.4, 0.3, 0.8, 0.9, 0.3, 0.8, 0.9, 0.5, 0.6, 0.4, 0.6, 0.9, 0.8, 0.4, 0.3, 0.7, 0.9, 0.8, 0.8, 0.7, 0.7, 0.4, 0.8, 0.7, 0.6, 0.4, 0.6, 0.8, 0.3, 0.4, 0.3, 0.3, 0.8, 0.8, 0.6, 0.8, 0.3, 0.6, 0.3, 0.8, 0.4, 0.4, 0.3, 0.8, 0.9, 0.5, 0.3, 0.5, 0.9, 0.3, 0.7, 0.7, 0.6, 0.5, 0.4, 0.4, 0.4, 0.6, 0.6, 0.9, 0.4, 0.4, 0.5, 0.5, 0.6, 0.7, 0.5, 0.7, 0.4, 0.8, 0.9, 0.9, 0.5, 0.8, 0.4, 0.9, 0.7, 0.3, 0.3, 0.4, 0.7, 0.7, 0.3, 0.8, 0.5, 0.5, 0.9, 0.9, 0.4, 0.9, 0.3, 0.8, 0.7, 0.7, 0.6, 0.4, 0.7, 0.4, 0.9, 0.8, 0.6, 0.5, 0.6, 0.9, 0.4, 0.9, 0.8, 0.5, 0.8, 0.6, 0.3, 0.3, 0.7, 0.3, 0.6, 0.6, 0.5, 0.8, 0.8, 0.6, 0.5, 0.4, 0.4, 0.8, 0.6, 0.8, 0.5, 0.8, 0.3, 0.6, 0.4, 0.5, 0.3]
if len(argv) > 2 and "No-distribute" not in argv[2]:
    dag.set_n(n)
dag.set_k(k)

dag.find_critical_path()
#dag.print_critical_path()

dag.rta_fcp(65536)

"""
nodes = []
node = Node() 
node.set(0, 320, 16, [], False) 
nodes.append(node)
node = Node() 
node.set(1, 180, 12, [0], False) 
nodes.append(node)
node = Node() 
node.set(2, 320, 16, [0], False) 
nodes.append(node)
node = Node() 
node.set(3, 160, 8, [0], False) 
nodes.append(node)
node = Node() 
node.set(4, 60, 4, [1], False) 
nodes.append(node)
node = Node() 
node.set(5, 320, 12, [2, 3], False) 
nodes.append(node)
node = Node() 
node.set(6, 160, 4, [4], False) 
nodes.append(node)
node = Node() 
node.set(7, 120, 12, [5], False) 
nodes.append(node)
node = Node() 
node.set(8, 240, 8, [6, 7], True) 
nodes.append(node)
"""
if len(argv) > 2 and "Wait-suff" in argv[2]:
    Al_CCs(dag.nodes, Method.Wait_suff)
elif len(argv) > 2 and "Dec-method" in argv[2]:
    Al_CCs(dag.nodes, Method.Dec_method)
else:
    Al_CCs(dag.nodes, Method.Al_avail)

JSONexport(dag)
p=[]
#for node in dag.nodes:
#    print("idx: "+str(node.idx).ljust(2)+", CC: "+str(node.cc_idx)+", c: "+str(len(node.core_idx)).ljust(3)+", time: "+str(node.time))
    #if node.p in p:
    #    print("idx: "+str(node.idx).ljust(2)+", priority: "+str(node.p))
    #else:
    #    p.append(node.p)
# ", n: "+str(node.core_idx)+
for node in dag.nodes:
    if node.snk is True:
        print(node.time+node.sc())
